// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: indgen_conn.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_indgen_5fconn_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_indgen_5fconn_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_indgen_5fconn_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_indgen_5fconn_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_indgen_5fconn_2eproto;
namespace indgen_conn {
class Ack;
class AckDefaultTypeInternal;
extern AckDefaultTypeInternal _Ack_default_instance_;
class Answer;
class AnswerDefaultTypeInternal;
extern AnswerDefaultTypeInternal _Answer_default_instance_;
class FullAnswer;
class FullAnswerDefaultTypeInternal;
extern FullAnswerDefaultTypeInternal _FullAnswer_default_instance_;
class HelloReply;
class HelloReplyDefaultTypeInternal;
extern HelloReplyDefaultTypeInternal _HelloReply_default_instance_;
class HelloRequest;
class HelloRequestDefaultTypeInternal;
extern HelloRequestDefaultTypeInternal _HelloRequest_default_instance_;
class Lemma;
class LemmaDefaultTypeInternal;
extern LemmaDefaultTypeInternal _Lemma_default_instance_;
class Query;
class QueryDefaultTypeInternal;
extern QueryDefaultTypeInternal _Query_default_instance_;
}  // namespace indgen_conn
PROTOBUF_NAMESPACE_OPEN
template<> ::indgen_conn::Ack* Arena::CreateMaybeMessage<::indgen_conn::Ack>(Arena*);
template<> ::indgen_conn::Answer* Arena::CreateMaybeMessage<::indgen_conn::Answer>(Arena*);
template<> ::indgen_conn::FullAnswer* Arena::CreateMaybeMessage<::indgen_conn::FullAnswer>(Arena*);
template<> ::indgen_conn::HelloReply* Arena::CreateMaybeMessage<::indgen_conn::HelloReply>(Arena*);
template<> ::indgen_conn::HelloRequest* Arena::CreateMaybeMessage<::indgen_conn::HelloRequest>(Arena*);
template<> ::indgen_conn::Lemma* Arena::CreateMaybeMessage<::indgen_conn::Lemma>(Arena*);
template<> ::indgen_conn::Query* Arena::CreateMaybeMessage<::indgen_conn::Query>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace indgen_conn {

// ===================================================================

class Lemma PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indgen_conn.Lemma) */ {
 public:
  inline Lemma() : Lemma(nullptr) {}
  virtual ~Lemma();

  Lemma(const Lemma& from);
  Lemma(Lemma&& from) noexcept
    : Lemma() {
    *this = ::std::move(from);
  }

  inline Lemma& operator=(const Lemma& from) {
    CopyFrom(from);
    return *this;
  }
  inline Lemma& operator=(Lemma&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Lemma& default_instance();

  static inline const Lemma* internal_default_instance() {
    return reinterpret_cast<const Lemma*>(
               &_Lemma_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Lemma& a, Lemma& b) {
    a.Swap(&b);
  }
  inline void Swap(Lemma* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Lemma* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Lemma* New() const final {
    return CreateMaybeMessage<Lemma>(nullptr);
  }

  Lemma* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Lemma>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Lemma& from);
  void MergeFrom(const Lemma& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Lemma* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indgen_conn.Lemma";
  }
  protected:
  explicit Lemma(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_indgen_5fconn_2eproto);
    return ::descriptor_table_indgen_5fconn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLemmaBeforeFieldNumber = 1,
    kLemmaAfterFieldNumber = 2,
  };
  // string lemma_before = 1;
  void clear_lemma_before();
  const std::string& lemma_before() const;
  void set_lemma_before(const std::string& value);
  void set_lemma_before(std::string&& value);
  void set_lemma_before(const char* value);
  void set_lemma_before(const char* value, size_t size);
  std::string* mutable_lemma_before();
  std::string* release_lemma_before();
  void set_allocated_lemma_before(std::string* lemma_before);
  private:
  const std::string& _internal_lemma_before() const;
  void _internal_set_lemma_before(const std::string& value);
  std::string* _internal_mutable_lemma_before();
  public:

  // string lemma_after = 2;
  void clear_lemma_after();
  const std::string& lemma_after() const;
  void set_lemma_after(const std::string& value);
  void set_lemma_after(std::string&& value);
  void set_lemma_after(const char* value);
  void set_lemma_after(const char* value, size_t size);
  std::string* mutable_lemma_after();
  std::string* release_lemma_after();
  void set_allocated_lemma_after(std::string* lemma_after);
  private:
  const std::string& _internal_lemma_after() const;
  void _internal_set_lemma_after(const std::string& value);
  std::string* _internal_mutable_lemma_after();
  public:

  // @@protoc_insertion_point(class_scope:indgen_conn.Lemma)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lemma_before_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lemma_after_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_indgen_5fconn_2eproto;
};
// -------------------------------------------------------------------

class HelloRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indgen_conn.HelloRequest) */ {
 public:
  inline HelloRequest() : HelloRequest(nullptr) {}
  virtual ~HelloRequest();

  HelloRequest(const HelloRequest& from);
  HelloRequest(HelloRequest&& from) noexcept
    : HelloRequest() {
    *this = ::std::move(from);
  }

  inline HelloRequest& operator=(const HelloRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloRequest& operator=(HelloRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HelloRequest& default_instance();

  static inline const HelloRequest* internal_default_instance() {
    return reinterpret_cast<const HelloRequest*>(
               &_HelloRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HelloRequest& a, HelloRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelloRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HelloRequest* New() const final {
    return CreateMaybeMessage<HelloRequest>(nullptr);
  }

  HelloRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HelloRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HelloRequest& from);
  void MergeFrom(const HelloRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indgen_conn.HelloRequest";
  }
  protected:
  explicit HelloRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_indgen_5fconn_2eproto);
    return ::descriptor_table_indgen_5fconn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:indgen_conn.HelloRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_indgen_5fconn_2eproto;
};
// -------------------------------------------------------------------

class Query PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indgen_conn.Query) */ {
 public:
  inline Query() : Query(nullptr) {}
  virtual ~Query();

  Query(const Query& from);
  Query(Query&& from) noexcept
    : Query() {
    *this = ::std::move(from);
  }

  inline Query& operator=(const Query& from) {
    CopyFrom(from);
    return *this;
  }
  inline Query& operator=(Query&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Query& default_instance();

  static inline const Query* internal_default_instance() {
    return reinterpret_cast<const Query*>(
               &_Query_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Query& a, Query& b) {
    a.Swap(&b);
  }
  inline void Swap(Query* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Query* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Query* New() const final {
    return CreateMaybeMessage<Query>(nullptr);
  }

  Query* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Query>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Query& from);
  void MergeFrom(const Query& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Query* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indgen_conn.Query";
  }
  protected:
  explicit Query(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_indgen_5fconn_2eproto);
    return ::descriptor_table_indgen_5fconn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeptLitsFieldNumber = 2,
    kToBeCheckedLitsFieldNumber = 4,
    kLemmaFieldNumber = 1,
    kLemmaSizeFieldNumber = 3,
    kLastAnsSuccessFieldNumber = 5,
  };
  // repeated int32 kept_lits = 2;
  int kept_lits_size() const;
  private:
  int _internal_kept_lits_size() const;
  public:
  void clear_kept_lits();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_kept_lits(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_kept_lits() const;
  void _internal_add_kept_lits(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_kept_lits();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 kept_lits(int index) const;
  void set_kept_lits(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_kept_lits(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      kept_lits() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_kept_lits();

  // repeated int32 to_be_checked_lits = 4;
  int to_be_checked_lits_size() const;
  private:
  int _internal_to_be_checked_lits_size() const;
  public:
  void clear_to_be_checked_lits();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_to_be_checked_lits(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_to_be_checked_lits() const;
  void _internal_add_to_be_checked_lits(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_to_be_checked_lits();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 to_be_checked_lits(int index) const;
  void set_to_be_checked_lits(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_to_be_checked_lits(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      to_be_checked_lits() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_to_be_checked_lits();

  // string lemma = 1;
  void clear_lemma();
  const std::string& lemma() const;
  void set_lemma(const std::string& value);
  void set_lemma(std::string&& value);
  void set_lemma(const char* value);
  void set_lemma(const char* value, size_t size);
  std::string* mutable_lemma();
  std::string* release_lemma();
  void set_allocated_lemma(std::string* lemma);
  private:
  const std::string& _internal_lemma() const;
  void _internal_set_lemma(const std::string& value);
  std::string* _internal_mutable_lemma();
  public:

  // int32 lemma_size = 3;
  void clear_lemma_size();
  ::PROTOBUF_NAMESPACE_ID::int32 lemma_size() const;
  void set_lemma_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lemma_size() const;
  void _internal_set_lemma_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool last_ans_success = 5;
  void clear_last_ans_success();
  bool last_ans_success() const;
  void set_last_ans_success(bool value);
  private:
  bool _internal_last_ans_success() const;
  void _internal_set_last_ans_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:indgen_conn.Query)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > kept_lits_;
  mutable std::atomic<int> _kept_lits_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > to_be_checked_lits_;
  mutable std::atomic<int> _to_be_checked_lits_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lemma_;
  ::PROTOBUF_NAMESPACE_ID::int32 lemma_size_;
  bool last_ans_success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_indgen_5fconn_2eproto;
};
// -------------------------------------------------------------------

class HelloReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indgen_conn.HelloReply) */ {
 public:
  inline HelloReply() : HelloReply(nullptr) {}
  virtual ~HelloReply();

  HelloReply(const HelloReply& from);
  HelloReply(HelloReply&& from) noexcept
    : HelloReply() {
    *this = ::std::move(from);
  }

  inline HelloReply& operator=(const HelloReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloReply& operator=(HelloReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HelloReply& default_instance();

  static inline const HelloReply* internal_default_instance() {
    return reinterpret_cast<const HelloReply*>(
               &_HelloReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HelloReply& a, HelloReply& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelloReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HelloReply* New() const final {
    return CreateMaybeMessage<HelloReply>(nullptr);
  }

  HelloReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HelloReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HelloReply& from);
  void MergeFrom(const HelloReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indgen_conn.HelloReply";
  }
  protected:
  explicit HelloReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_indgen_5fconn_2eproto);
    return ::descriptor_table_indgen_5fconn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:indgen_conn.HelloReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_indgen_5fconn_2eproto;
};
// -------------------------------------------------------------------

class Answer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indgen_conn.Answer) */ {
 public:
  inline Answer() : Answer(nullptr) {}
  virtual ~Answer();

  Answer(const Answer& from);
  Answer(Answer&& from) noexcept
    : Answer() {
    *this = ::std::move(from);
  }

  inline Answer& operator=(const Answer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Answer& operator=(Answer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Answer& default_instance();

  static inline const Answer* internal_default_instance() {
    return reinterpret_cast<const Answer*>(
               &_Answer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Answer& a, Answer& b) {
    a.Swap(&b);
  }
  inline void Swap(Answer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Answer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Answer* New() const final {
    return CreateMaybeMessage<Answer>(nullptr);
  }

  Answer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Answer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Answer& from);
  void MergeFrom(const Answer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Answer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indgen_conn.Answer";
  }
  protected:
  explicit Answer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_indgen_5fconn_2eproto);
    return ::descriptor_table_indgen_5fconn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnswerFieldNumber = 1,
  };
  // repeated int32 answer = 1;
  int answer_size() const;
  private:
  int _internal_answer_size() const;
  public:
  void clear_answer();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_answer(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_answer() const;
  void _internal_add_answer(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_answer();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 answer(int index) const;
  void set_answer(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_answer(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      answer() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_answer();

  // @@protoc_insertion_point(class_scope:indgen_conn.Answer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > answer_;
  mutable std::atomic<int> _answer_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_indgen_5fconn_2eproto;
};
// -------------------------------------------------------------------

class FullAnswer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indgen_conn.FullAnswer) */ {
 public:
  inline FullAnswer() : FullAnswer(nullptr) {}
  virtual ~FullAnswer();

  FullAnswer(const FullAnswer& from);
  FullAnswer(FullAnswer&& from) noexcept
    : FullAnswer() {
    *this = ::std::move(from);
  }

  inline FullAnswer& operator=(const FullAnswer& from) {
    CopyFrom(from);
    return *this;
  }
  inline FullAnswer& operator=(FullAnswer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FullAnswer& default_instance();

  static inline const FullAnswer* internal_default_instance() {
    return reinterpret_cast<const FullAnswer*>(
               &_FullAnswer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FullAnswer& a, FullAnswer& b) {
    a.Swap(&b);
  }
  inline void Swap(FullAnswer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FullAnswer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FullAnswer* New() const final {
    return CreateMaybeMessage<FullAnswer>(nullptr);
  }

  FullAnswer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FullAnswer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FullAnswer& from);
  void MergeFrom(const FullAnswer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FullAnswer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indgen_conn.FullAnswer";
  }
  protected:
  explicit FullAnswer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_indgen_5fconn_2eproto);
    return ::descriptor_table_indgen_5fconn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaskFieldNumber = 2,
    kNewKeptLitsFieldNumber = 3,
    kNewToBeCheckedLitsFieldNumber = 4,
    kCheckingLitsFieldNumber = 5,
    kDirtyFieldNumber = 1,
  };
  // repeated int32 mask = 2;
  int mask_size() const;
  private:
  int _internal_mask_size() const;
  public:
  void clear_mask();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mask(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_mask() const;
  void _internal_add_mask(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_mask();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 mask(int index) const;
  void set_mask(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_mask(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      mask() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_mask();

  // repeated int32 new_kept_lits = 3;
  int new_kept_lits_size() const;
  private:
  int _internal_new_kept_lits_size() const;
  public:
  void clear_new_kept_lits();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_new_kept_lits(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_new_kept_lits() const;
  void _internal_add_new_kept_lits(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_new_kept_lits();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 new_kept_lits(int index) const;
  void set_new_kept_lits(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_new_kept_lits(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      new_kept_lits() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_new_kept_lits();

  // repeated int32 new_to_be_checked_lits = 4;
  int new_to_be_checked_lits_size() const;
  private:
  int _internal_new_to_be_checked_lits_size() const;
  public:
  void clear_new_to_be_checked_lits();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_new_to_be_checked_lits(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_new_to_be_checked_lits() const;
  void _internal_add_new_to_be_checked_lits(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_new_to_be_checked_lits();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 new_to_be_checked_lits(int index) const;
  void set_new_to_be_checked_lits(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_new_to_be_checked_lits(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      new_to_be_checked_lits() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_new_to_be_checked_lits();

  // repeated int32 checking_lits = 5;
  int checking_lits_size() const;
  private:
  int _internal_checking_lits_size() const;
  public:
  void clear_checking_lits();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_checking_lits(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_checking_lits() const;
  void _internal_add_checking_lits(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_checking_lits();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 checking_lits(int index) const;
  void set_checking_lits(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_checking_lits(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      checking_lits() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_checking_lits();

  // bool dirty = 1;
  void clear_dirty();
  bool dirty() const;
  void set_dirty(bool value);
  private:
  bool _internal_dirty() const;
  void _internal_set_dirty(bool value);
  public:

  // @@protoc_insertion_point(class_scope:indgen_conn.FullAnswer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > mask_;
  mutable std::atomic<int> _mask_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > new_kept_lits_;
  mutable std::atomic<int> _new_kept_lits_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > new_to_be_checked_lits_;
  mutable std::atomic<int> _new_to_be_checked_lits_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > checking_lits_;
  mutable std::atomic<int> _checking_lits_cached_byte_size_;
  bool dirty_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_indgen_5fconn_2eproto;
};
// -------------------------------------------------------------------

class Ack PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:indgen_conn.Ack) */ {
 public:
  inline Ack() : Ack(nullptr) {}
  virtual ~Ack();

  Ack(const Ack& from);
  Ack(Ack&& from) noexcept
    : Ack() {
    *this = ::std::move(from);
  }

  inline Ack& operator=(const Ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ack& operator=(Ack&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ack& default_instance();

  static inline const Ack* internal_default_instance() {
    return reinterpret_cast<const Ack*>(
               &_Ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Ack& a, Ack& b) {
    a.Swap(&b);
  }
  inline void Swap(Ack* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ack* New() const final {
    return CreateMaybeMessage<Ack>(nullptr);
  }

  Ack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ack& from);
  void MergeFrom(const Ack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "indgen_conn.Ack";
  }
  protected:
  explicit Ack(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_indgen_5fconn_2eproto);
    return ::descriptor_table_indgen_5fconn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAckMessageFieldNumber = 1,
  };
  // bool ack_message = 1;
  void clear_ack_message();
  bool ack_message() const;
  void set_ack_message(bool value);
  private:
  bool _internal_ack_message() const;
  void _internal_set_ack_message(bool value);
  public:

  // @@protoc_insertion_point(class_scope:indgen_conn.Ack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool ack_message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_indgen_5fconn_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Lemma

// string lemma_before = 1;
inline void Lemma::clear_lemma_before() {
  lemma_before_.ClearToEmpty();
}
inline const std::string& Lemma::lemma_before() const {
  // @@protoc_insertion_point(field_get:indgen_conn.Lemma.lemma_before)
  return _internal_lemma_before();
}
inline void Lemma::set_lemma_before(const std::string& value) {
  _internal_set_lemma_before(value);
  // @@protoc_insertion_point(field_set:indgen_conn.Lemma.lemma_before)
}
inline std::string* Lemma::mutable_lemma_before() {
  // @@protoc_insertion_point(field_mutable:indgen_conn.Lemma.lemma_before)
  return _internal_mutable_lemma_before();
}
inline const std::string& Lemma::_internal_lemma_before() const {
  return lemma_before_.Get();
}
inline void Lemma::_internal_set_lemma_before(const std::string& value) {
  
  lemma_before_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Lemma::set_lemma_before(std::string&& value) {
  
  lemma_before_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:indgen_conn.Lemma.lemma_before)
}
inline void Lemma::set_lemma_before(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lemma_before_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:indgen_conn.Lemma.lemma_before)
}
inline void Lemma::set_lemma_before(const char* value,
    size_t size) {
  
  lemma_before_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:indgen_conn.Lemma.lemma_before)
}
inline std::string* Lemma::_internal_mutable_lemma_before() {
  
  return lemma_before_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Lemma::release_lemma_before() {
  // @@protoc_insertion_point(field_release:indgen_conn.Lemma.lemma_before)
  return lemma_before_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Lemma::set_allocated_lemma_before(std::string* lemma_before) {
  if (lemma_before != nullptr) {
    
  } else {
    
  }
  lemma_before_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lemma_before,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:indgen_conn.Lemma.lemma_before)
}

// string lemma_after = 2;
inline void Lemma::clear_lemma_after() {
  lemma_after_.ClearToEmpty();
}
inline const std::string& Lemma::lemma_after() const {
  // @@protoc_insertion_point(field_get:indgen_conn.Lemma.lemma_after)
  return _internal_lemma_after();
}
inline void Lemma::set_lemma_after(const std::string& value) {
  _internal_set_lemma_after(value);
  // @@protoc_insertion_point(field_set:indgen_conn.Lemma.lemma_after)
}
inline std::string* Lemma::mutable_lemma_after() {
  // @@protoc_insertion_point(field_mutable:indgen_conn.Lemma.lemma_after)
  return _internal_mutable_lemma_after();
}
inline const std::string& Lemma::_internal_lemma_after() const {
  return lemma_after_.Get();
}
inline void Lemma::_internal_set_lemma_after(const std::string& value) {
  
  lemma_after_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Lemma::set_lemma_after(std::string&& value) {
  
  lemma_after_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:indgen_conn.Lemma.lemma_after)
}
inline void Lemma::set_lemma_after(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lemma_after_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:indgen_conn.Lemma.lemma_after)
}
inline void Lemma::set_lemma_after(const char* value,
    size_t size) {
  
  lemma_after_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:indgen_conn.Lemma.lemma_after)
}
inline std::string* Lemma::_internal_mutable_lemma_after() {
  
  return lemma_after_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Lemma::release_lemma_after() {
  // @@protoc_insertion_point(field_release:indgen_conn.Lemma.lemma_after)
  return lemma_after_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Lemma::set_allocated_lemma_after(std::string* lemma_after) {
  if (lemma_after != nullptr) {
    
  } else {
    
  }
  lemma_after_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lemma_after,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:indgen_conn.Lemma.lemma_after)
}

// -------------------------------------------------------------------

// HelloRequest

// string name = 1;
inline void HelloRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& HelloRequest::name() const {
  // @@protoc_insertion_point(field_get:indgen_conn.HelloRequest.name)
  return _internal_name();
}
inline void HelloRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:indgen_conn.HelloRequest.name)
}
inline std::string* HelloRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:indgen_conn.HelloRequest.name)
  return _internal_mutable_name();
}
inline const std::string& HelloRequest::_internal_name() const {
  return name_.Get();
}
inline void HelloRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HelloRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:indgen_conn.HelloRequest.name)
}
inline void HelloRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:indgen_conn.HelloRequest.name)
}
inline void HelloRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:indgen_conn.HelloRequest.name)
}
inline std::string* HelloRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HelloRequest::release_name() {
  // @@protoc_insertion_point(field_release:indgen_conn.HelloRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HelloRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:indgen_conn.HelloRequest.name)
}

// -------------------------------------------------------------------

// Query

// string lemma = 1;
inline void Query::clear_lemma() {
  lemma_.ClearToEmpty();
}
inline const std::string& Query::lemma() const {
  // @@protoc_insertion_point(field_get:indgen_conn.Query.lemma)
  return _internal_lemma();
}
inline void Query::set_lemma(const std::string& value) {
  _internal_set_lemma(value);
  // @@protoc_insertion_point(field_set:indgen_conn.Query.lemma)
}
inline std::string* Query::mutable_lemma() {
  // @@protoc_insertion_point(field_mutable:indgen_conn.Query.lemma)
  return _internal_mutable_lemma();
}
inline const std::string& Query::_internal_lemma() const {
  return lemma_.Get();
}
inline void Query::_internal_set_lemma(const std::string& value) {
  
  lemma_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Query::set_lemma(std::string&& value) {
  
  lemma_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:indgen_conn.Query.lemma)
}
inline void Query::set_lemma(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lemma_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:indgen_conn.Query.lemma)
}
inline void Query::set_lemma(const char* value,
    size_t size) {
  
  lemma_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:indgen_conn.Query.lemma)
}
inline std::string* Query::_internal_mutable_lemma() {
  
  return lemma_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Query::release_lemma() {
  // @@protoc_insertion_point(field_release:indgen_conn.Query.lemma)
  return lemma_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Query::set_allocated_lemma(std::string* lemma) {
  if (lemma != nullptr) {
    
  } else {
    
  }
  lemma_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lemma,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:indgen_conn.Query.lemma)
}

// repeated int32 kept_lits = 2;
inline int Query::_internal_kept_lits_size() const {
  return kept_lits_.size();
}
inline int Query::kept_lits_size() const {
  return _internal_kept_lits_size();
}
inline void Query::clear_kept_lits() {
  kept_lits_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Query::_internal_kept_lits(int index) const {
  return kept_lits_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Query::kept_lits(int index) const {
  // @@protoc_insertion_point(field_get:indgen_conn.Query.kept_lits)
  return _internal_kept_lits(index);
}
inline void Query::set_kept_lits(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  kept_lits_.Set(index, value);
  // @@protoc_insertion_point(field_set:indgen_conn.Query.kept_lits)
}
inline void Query::_internal_add_kept_lits(::PROTOBUF_NAMESPACE_ID::int32 value) {
  kept_lits_.Add(value);
}
inline void Query::add_kept_lits(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_kept_lits(value);
  // @@protoc_insertion_point(field_add:indgen_conn.Query.kept_lits)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Query::_internal_kept_lits() const {
  return kept_lits_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Query::kept_lits() const {
  // @@protoc_insertion_point(field_list:indgen_conn.Query.kept_lits)
  return _internal_kept_lits();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Query::_internal_mutable_kept_lits() {
  return &kept_lits_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Query::mutable_kept_lits() {
  // @@protoc_insertion_point(field_mutable_list:indgen_conn.Query.kept_lits)
  return _internal_mutable_kept_lits();
}

// int32 lemma_size = 3;
inline void Query::clear_lemma_size() {
  lemma_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Query::_internal_lemma_size() const {
  return lemma_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Query::lemma_size() const {
  // @@protoc_insertion_point(field_get:indgen_conn.Query.lemma_size)
  return _internal_lemma_size();
}
inline void Query::_internal_set_lemma_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lemma_size_ = value;
}
inline void Query::set_lemma_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lemma_size(value);
  // @@protoc_insertion_point(field_set:indgen_conn.Query.lemma_size)
}

// repeated int32 to_be_checked_lits = 4;
inline int Query::_internal_to_be_checked_lits_size() const {
  return to_be_checked_lits_.size();
}
inline int Query::to_be_checked_lits_size() const {
  return _internal_to_be_checked_lits_size();
}
inline void Query::clear_to_be_checked_lits() {
  to_be_checked_lits_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Query::_internal_to_be_checked_lits(int index) const {
  return to_be_checked_lits_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Query::to_be_checked_lits(int index) const {
  // @@protoc_insertion_point(field_get:indgen_conn.Query.to_be_checked_lits)
  return _internal_to_be_checked_lits(index);
}
inline void Query::set_to_be_checked_lits(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  to_be_checked_lits_.Set(index, value);
  // @@protoc_insertion_point(field_set:indgen_conn.Query.to_be_checked_lits)
}
inline void Query::_internal_add_to_be_checked_lits(::PROTOBUF_NAMESPACE_ID::int32 value) {
  to_be_checked_lits_.Add(value);
}
inline void Query::add_to_be_checked_lits(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_to_be_checked_lits(value);
  // @@protoc_insertion_point(field_add:indgen_conn.Query.to_be_checked_lits)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Query::_internal_to_be_checked_lits() const {
  return to_be_checked_lits_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Query::to_be_checked_lits() const {
  // @@protoc_insertion_point(field_list:indgen_conn.Query.to_be_checked_lits)
  return _internal_to_be_checked_lits();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Query::_internal_mutable_to_be_checked_lits() {
  return &to_be_checked_lits_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Query::mutable_to_be_checked_lits() {
  // @@protoc_insertion_point(field_mutable_list:indgen_conn.Query.to_be_checked_lits)
  return _internal_mutable_to_be_checked_lits();
}

// bool last_ans_success = 5;
inline void Query::clear_last_ans_success() {
  last_ans_success_ = false;
}
inline bool Query::_internal_last_ans_success() const {
  return last_ans_success_;
}
inline bool Query::last_ans_success() const {
  // @@protoc_insertion_point(field_get:indgen_conn.Query.last_ans_success)
  return _internal_last_ans_success();
}
inline void Query::_internal_set_last_ans_success(bool value) {
  
  last_ans_success_ = value;
}
inline void Query::set_last_ans_success(bool value) {
  _internal_set_last_ans_success(value);
  // @@protoc_insertion_point(field_set:indgen_conn.Query.last_ans_success)
}

// -------------------------------------------------------------------

// HelloReply

// string message = 1;
inline void HelloReply::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& HelloReply::message() const {
  // @@protoc_insertion_point(field_get:indgen_conn.HelloReply.message)
  return _internal_message();
}
inline void HelloReply::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:indgen_conn.HelloReply.message)
}
inline std::string* HelloReply::mutable_message() {
  // @@protoc_insertion_point(field_mutable:indgen_conn.HelloReply.message)
  return _internal_mutable_message();
}
inline const std::string& HelloReply::_internal_message() const {
  return message_.Get();
}
inline void HelloReply::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HelloReply::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:indgen_conn.HelloReply.message)
}
inline void HelloReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:indgen_conn.HelloReply.message)
}
inline void HelloReply::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:indgen_conn.HelloReply.message)
}
inline std::string* HelloReply::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HelloReply::release_message() {
  // @@protoc_insertion_point(field_release:indgen_conn.HelloReply.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HelloReply::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:indgen_conn.HelloReply.message)
}

// -------------------------------------------------------------------

// Answer

// repeated int32 answer = 1;
inline int Answer::_internal_answer_size() const {
  return answer_.size();
}
inline int Answer::answer_size() const {
  return _internal_answer_size();
}
inline void Answer::clear_answer() {
  answer_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Answer::_internal_answer(int index) const {
  return answer_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Answer::answer(int index) const {
  // @@protoc_insertion_point(field_get:indgen_conn.Answer.answer)
  return _internal_answer(index);
}
inline void Answer::set_answer(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  answer_.Set(index, value);
  // @@protoc_insertion_point(field_set:indgen_conn.Answer.answer)
}
inline void Answer::_internal_add_answer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  answer_.Add(value);
}
inline void Answer::add_answer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_answer(value);
  // @@protoc_insertion_point(field_add:indgen_conn.Answer.answer)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Answer::_internal_answer() const {
  return answer_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Answer::answer() const {
  // @@protoc_insertion_point(field_list:indgen_conn.Answer.answer)
  return _internal_answer();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Answer::_internal_mutable_answer() {
  return &answer_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Answer::mutable_answer() {
  // @@protoc_insertion_point(field_mutable_list:indgen_conn.Answer.answer)
  return _internal_mutable_answer();
}

// -------------------------------------------------------------------

// FullAnswer

// bool dirty = 1;
inline void FullAnswer::clear_dirty() {
  dirty_ = false;
}
inline bool FullAnswer::_internal_dirty() const {
  return dirty_;
}
inline bool FullAnswer::dirty() const {
  // @@protoc_insertion_point(field_get:indgen_conn.FullAnswer.dirty)
  return _internal_dirty();
}
inline void FullAnswer::_internal_set_dirty(bool value) {
  
  dirty_ = value;
}
inline void FullAnswer::set_dirty(bool value) {
  _internal_set_dirty(value);
  // @@protoc_insertion_point(field_set:indgen_conn.FullAnswer.dirty)
}

// repeated int32 mask = 2;
inline int FullAnswer::_internal_mask_size() const {
  return mask_.size();
}
inline int FullAnswer::mask_size() const {
  return _internal_mask_size();
}
inline void FullAnswer::clear_mask() {
  mask_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FullAnswer::_internal_mask(int index) const {
  return mask_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FullAnswer::mask(int index) const {
  // @@protoc_insertion_point(field_get:indgen_conn.FullAnswer.mask)
  return _internal_mask(index);
}
inline void FullAnswer::set_mask(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  mask_.Set(index, value);
  // @@protoc_insertion_point(field_set:indgen_conn.FullAnswer.mask)
}
inline void FullAnswer::_internal_add_mask(::PROTOBUF_NAMESPACE_ID::int32 value) {
  mask_.Add(value);
}
inline void FullAnswer::add_mask(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_mask(value);
  // @@protoc_insertion_point(field_add:indgen_conn.FullAnswer.mask)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
FullAnswer::_internal_mask() const {
  return mask_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
FullAnswer::mask() const {
  // @@protoc_insertion_point(field_list:indgen_conn.FullAnswer.mask)
  return _internal_mask();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
FullAnswer::_internal_mutable_mask() {
  return &mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
FullAnswer::mutable_mask() {
  // @@protoc_insertion_point(field_mutable_list:indgen_conn.FullAnswer.mask)
  return _internal_mutable_mask();
}

// repeated int32 new_kept_lits = 3;
inline int FullAnswer::_internal_new_kept_lits_size() const {
  return new_kept_lits_.size();
}
inline int FullAnswer::new_kept_lits_size() const {
  return _internal_new_kept_lits_size();
}
inline void FullAnswer::clear_new_kept_lits() {
  new_kept_lits_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FullAnswer::_internal_new_kept_lits(int index) const {
  return new_kept_lits_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FullAnswer::new_kept_lits(int index) const {
  // @@protoc_insertion_point(field_get:indgen_conn.FullAnswer.new_kept_lits)
  return _internal_new_kept_lits(index);
}
inline void FullAnswer::set_new_kept_lits(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  new_kept_lits_.Set(index, value);
  // @@protoc_insertion_point(field_set:indgen_conn.FullAnswer.new_kept_lits)
}
inline void FullAnswer::_internal_add_new_kept_lits(::PROTOBUF_NAMESPACE_ID::int32 value) {
  new_kept_lits_.Add(value);
}
inline void FullAnswer::add_new_kept_lits(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_new_kept_lits(value);
  // @@protoc_insertion_point(field_add:indgen_conn.FullAnswer.new_kept_lits)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
FullAnswer::_internal_new_kept_lits() const {
  return new_kept_lits_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
FullAnswer::new_kept_lits() const {
  // @@protoc_insertion_point(field_list:indgen_conn.FullAnswer.new_kept_lits)
  return _internal_new_kept_lits();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
FullAnswer::_internal_mutable_new_kept_lits() {
  return &new_kept_lits_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
FullAnswer::mutable_new_kept_lits() {
  // @@protoc_insertion_point(field_mutable_list:indgen_conn.FullAnswer.new_kept_lits)
  return _internal_mutable_new_kept_lits();
}

// repeated int32 new_to_be_checked_lits = 4;
inline int FullAnswer::_internal_new_to_be_checked_lits_size() const {
  return new_to_be_checked_lits_.size();
}
inline int FullAnswer::new_to_be_checked_lits_size() const {
  return _internal_new_to_be_checked_lits_size();
}
inline void FullAnswer::clear_new_to_be_checked_lits() {
  new_to_be_checked_lits_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FullAnswer::_internal_new_to_be_checked_lits(int index) const {
  return new_to_be_checked_lits_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FullAnswer::new_to_be_checked_lits(int index) const {
  // @@protoc_insertion_point(field_get:indgen_conn.FullAnswer.new_to_be_checked_lits)
  return _internal_new_to_be_checked_lits(index);
}
inline void FullAnswer::set_new_to_be_checked_lits(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  new_to_be_checked_lits_.Set(index, value);
  // @@protoc_insertion_point(field_set:indgen_conn.FullAnswer.new_to_be_checked_lits)
}
inline void FullAnswer::_internal_add_new_to_be_checked_lits(::PROTOBUF_NAMESPACE_ID::int32 value) {
  new_to_be_checked_lits_.Add(value);
}
inline void FullAnswer::add_new_to_be_checked_lits(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_new_to_be_checked_lits(value);
  // @@protoc_insertion_point(field_add:indgen_conn.FullAnswer.new_to_be_checked_lits)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
FullAnswer::_internal_new_to_be_checked_lits() const {
  return new_to_be_checked_lits_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
FullAnswer::new_to_be_checked_lits() const {
  // @@protoc_insertion_point(field_list:indgen_conn.FullAnswer.new_to_be_checked_lits)
  return _internal_new_to_be_checked_lits();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
FullAnswer::_internal_mutable_new_to_be_checked_lits() {
  return &new_to_be_checked_lits_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
FullAnswer::mutable_new_to_be_checked_lits() {
  // @@protoc_insertion_point(field_mutable_list:indgen_conn.FullAnswer.new_to_be_checked_lits)
  return _internal_mutable_new_to_be_checked_lits();
}

// repeated int32 checking_lits = 5;
inline int FullAnswer::_internal_checking_lits_size() const {
  return checking_lits_.size();
}
inline int FullAnswer::checking_lits_size() const {
  return _internal_checking_lits_size();
}
inline void FullAnswer::clear_checking_lits() {
  checking_lits_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FullAnswer::_internal_checking_lits(int index) const {
  return checking_lits_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FullAnswer::checking_lits(int index) const {
  // @@protoc_insertion_point(field_get:indgen_conn.FullAnswer.checking_lits)
  return _internal_checking_lits(index);
}
inline void FullAnswer::set_checking_lits(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  checking_lits_.Set(index, value);
  // @@protoc_insertion_point(field_set:indgen_conn.FullAnswer.checking_lits)
}
inline void FullAnswer::_internal_add_checking_lits(::PROTOBUF_NAMESPACE_ID::int32 value) {
  checking_lits_.Add(value);
}
inline void FullAnswer::add_checking_lits(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_checking_lits(value);
  // @@protoc_insertion_point(field_add:indgen_conn.FullAnswer.checking_lits)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
FullAnswer::_internal_checking_lits() const {
  return checking_lits_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
FullAnswer::checking_lits() const {
  // @@protoc_insertion_point(field_list:indgen_conn.FullAnswer.checking_lits)
  return _internal_checking_lits();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
FullAnswer::_internal_mutable_checking_lits() {
  return &checking_lits_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
FullAnswer::mutable_checking_lits() {
  // @@protoc_insertion_point(field_mutable_list:indgen_conn.FullAnswer.checking_lits)
  return _internal_mutable_checking_lits();
}

// -------------------------------------------------------------------

// Ack

// bool ack_message = 1;
inline void Ack::clear_ack_message() {
  ack_message_ = false;
}
inline bool Ack::_internal_ack_message() const {
  return ack_message_;
}
inline bool Ack::ack_message() const {
  // @@protoc_insertion_point(field_get:indgen_conn.Ack.ack_message)
  return _internal_ack_message();
}
inline void Ack::_internal_set_ack_message(bool value) {
  
  ack_message_ = value;
}
inline void Ack::set_ack_message(bool value) {
  _internal_set_ack_message(value);
  // @@protoc_insertion_point(field_set:indgen_conn.Ack.ack_message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace indgen_conn

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_indgen_5fconn_2eproto
