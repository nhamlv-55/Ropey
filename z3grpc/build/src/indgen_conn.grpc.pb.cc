// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: indgen_conn.proto

#include "indgen_conn.pb.h"
#include "indgen_conn.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace indgen_conn {

static const char* Greeter_method_names[] = {
  "/indgen_conn.Greeter/SayHello",
  "/indgen_conn.Greeter/SendLemma",
  "/indgen_conn.Greeter/QueryMask",
};

std::unique_ptr< Greeter::Stub> Greeter::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Greeter::Stub> stub(new Greeter::Stub(channel));
  return stub;
}

Greeter::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SayHello_(Greeter_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendLemma_(Greeter_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryMask_(Greeter_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Greeter::Stub::SayHello(::grpc::ClientContext* context, const ::indgen_conn::HelloRequest& request, ::indgen_conn::HelloReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::indgen_conn::HelloRequest, ::indgen_conn::HelloReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SayHello_, context, request, response);
}

void Greeter::Stub::experimental_async::SayHello(::grpc::ClientContext* context, const ::indgen_conn::HelloRequest* request, ::indgen_conn::HelloReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::indgen_conn::HelloRequest, ::indgen_conn::HelloReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::SayHello(::grpc::ClientContext* context, const ::indgen_conn::HelloRequest* request, ::indgen_conn::HelloReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::indgen_conn::HelloReply>* Greeter::Stub::PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::indgen_conn::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::indgen_conn::HelloReply, ::indgen_conn::HelloRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SayHello_, context, request);
}

::grpc::ClientAsyncResponseReader< ::indgen_conn::HelloReply>* Greeter::Stub::AsyncSayHelloRaw(::grpc::ClientContext* context, const ::indgen_conn::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSayHelloRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Greeter::Stub::SendLemma(::grpc::ClientContext* context, const ::indgen_conn::Lemma& request, ::indgen_conn::Ack* response) {
  return ::grpc::internal::BlockingUnaryCall< ::indgen_conn::Lemma, ::indgen_conn::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendLemma_, context, request, response);
}

void Greeter::Stub::experimental_async::SendLemma(::grpc::ClientContext* context, const ::indgen_conn::Lemma* request, ::indgen_conn::Ack* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::indgen_conn::Lemma, ::indgen_conn::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendLemma_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::SendLemma(::grpc::ClientContext* context, const ::indgen_conn::Lemma* request, ::indgen_conn::Ack* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendLemma_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::indgen_conn::Ack>* Greeter::Stub::PrepareAsyncSendLemmaRaw(::grpc::ClientContext* context, const ::indgen_conn::Lemma& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::indgen_conn::Ack, ::indgen_conn::Lemma, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendLemma_, context, request);
}

::grpc::ClientAsyncResponseReader< ::indgen_conn::Ack>* Greeter::Stub::AsyncSendLemmaRaw(::grpc::ClientContext* context, const ::indgen_conn::Lemma& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendLemmaRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Greeter::Stub::QueryMask(::grpc::ClientContext* context, const ::indgen_conn::Query& request, ::indgen_conn::FullAnswer* response) {
  return ::grpc::internal::BlockingUnaryCall< ::indgen_conn::Query, ::indgen_conn::FullAnswer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QueryMask_, context, request, response);
}

void Greeter::Stub::experimental_async::QueryMask(::grpc::ClientContext* context, const ::indgen_conn::Query* request, ::indgen_conn::FullAnswer* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::indgen_conn::Query, ::indgen_conn::FullAnswer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryMask_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::QueryMask(::grpc::ClientContext* context, const ::indgen_conn::Query* request, ::indgen_conn::FullAnswer* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryMask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::indgen_conn::FullAnswer>* Greeter::Stub::PrepareAsyncQueryMaskRaw(::grpc::ClientContext* context, const ::indgen_conn::Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::indgen_conn::FullAnswer, ::indgen_conn::Query, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QueryMask_, context, request);
}

::grpc::ClientAsyncResponseReader< ::indgen_conn::FullAnswer>* Greeter::Stub::AsyncQueryMaskRaw(::grpc::ClientContext* context, const ::indgen_conn::Query& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryMaskRaw(context, request, cq);
  result->StartCall();
  return result;
}

Greeter::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::indgen_conn::HelloRequest, ::indgen_conn::HelloReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::indgen_conn::HelloRequest* req,
             ::indgen_conn::HelloReply* resp) {
               return service->SayHello(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::indgen_conn::Lemma, ::indgen_conn::Ack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::indgen_conn::Lemma* req,
             ::indgen_conn::Ack* resp) {
               return service->SendLemma(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::indgen_conn::Query, ::indgen_conn::FullAnswer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::indgen_conn::Query* req,
             ::indgen_conn::FullAnswer* resp) {
               return service->QueryMask(ctx, req, resp);
             }, this)));
}

Greeter::Service::~Service() {
}

::grpc::Status Greeter::Service::SayHello(::grpc::ServerContext* context, const ::indgen_conn::HelloRequest* request, ::indgen_conn::HelloReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::SendLemma(::grpc::ServerContext* context, const ::indgen_conn::Lemma* request, ::indgen_conn::Ack* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::QueryMask(::grpc::ServerContext* context, const ::indgen_conn::Query* request, ::indgen_conn::FullAnswer* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace indgen_conn

